{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Abhishek Kumar Roy\\\\OneDrive\\\\Desktop\\\\finance_tracker\\\\finance_tracker\\\\src\\\\components\\\\Hyperspeed.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\nimport * as THREE from 'three';\nimport { BloomEffect, EffectComposer, EffectPass, RenderPass, SMAAEffect, SMAAPreset } from 'postprocessing';\nimport './Hyperspeed.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Hyperspeed = ({\n  effectOptions = {\n    onSpeedUp: () => {},\n    onSlowDown: () => {},\n    distortion: 'turbulentDistortion',\n    length: 400,\n    roadWidth: 10,\n    islandWidth: 2,\n    lanesPerRoad: 4,\n    fov: 90,\n    fovSpeedUp: 150,\n    speedUp: 2,\n    carLightsFade: 0.4,\n    totalSideLightSticks: 20,\n    lightPairsPerRoadWay: 40,\n    shoulderLinesWidthPercentage: 0.05,\n    brokenLinesWidthPercentage: 0.1,\n    brokenLinesLengthPercentage: 0.5,\n    lightStickWidth: [0.12, 0.5],\n    lightStickHeight: [1.3, 1.7],\n    movingAwaySpeed: [60, 80],\n    movingCloserSpeed: [-120, -160],\n    carLightsLength: [400 * 0.03, 400 * 0.2],\n    carLightsRadius: [0.05, 0.14],\n    carWidthPercentage: [0.3, 0.5],\n    carShiftX: [-0.8, 0.8],\n    carFloorSeparation: [0, 5],\n    colors: {\n      roadColor: 0x080808,\n      islandColor: 0x0a0a0a,\n      background: 0x000000,\n      shoulderLines: 0xFFFFFF,\n      brokenLines: 0xFFFFFF,\n      leftCars: [0xD856BF, 0x6750A2, 0xC247AC],\n      rightCars: [0x03B3C3, 0x0E5EA5, 0x324555],\n      sticks: 0x03B3C3\n    }\n  }\n}) => {\n  _s();\n  const hyperspeed = useRef(null);\n  useEffect(() => {\n    const mountainUniforms = {\n      uFreq: {\n        value: new THREE.Vector3(3, 6, 10)\n      },\n      uAmp: {\n        value: new THREE.Vector3(30, 30, 20)\n      }\n    };\n    const xyUniforms = {\n      uFreq: {\n        value: new THREE.Vector2(5, 2)\n      },\n      uAmp: {\n        value: new THREE.Vector2(25, 15)\n      }\n    };\n    const LongRaceUniforms = {\n      uFreq: {\n        value: new THREE.Vector2(2, 3)\n      },\n      uAmp: {\n        value: new THREE.Vector2(35, 10)\n      }\n    };\n    const turbulentUniforms = {\n      uFreq: {\n        value: new THREE.Vector4(4, 8, 8, 1)\n      },\n      uAmp: {\n        value: new THREE.Vector4(25, 5, 10, 10)\n      }\n    };\n    const deepUniforms = {\n      uFreq: {\n        value: new THREE.Vector2(4, 8)\n      },\n      uAmp: {\n        value: new THREE.Vector2(10, 20)\n      },\n      uPowY: {\n        value: new THREE.Vector2(20, 2)\n      }\n    };\n    let nsin = val => Math.sin(val) * 0.5 + 0.5;\n    const distortions = {\n      mountainDistortion: {\n        uniforms: mountainUniforms,\n        getDistortion: `\n        uniform vec3 uAmp;\n        uniform vec3 uFreq;\n        #define PI 3.14159265358979\n        float nsin(float val){\n          return sin(val) * 0.5 + 0.5;\n        }\n        vec3 getDistortion(float progress){\n          float movementProgressFix = 0.02;\n          return vec3( \n            cos(progress * PI * uFreq.x + uTime) * uAmp.x - cos(movementProgressFix * PI * uFreq.x + uTime) * uAmp.x,\n            nsin(progress * PI * uFreq.y + uTime) * uAmp.y - nsin(movementProgressFix * PI * uFreq.y + uTime) * uAmp.y,\n            nsin(progress * PI * uFreq.z + uTime) * uAmp.z - nsin(movementProgressFix * PI * uFreq.z + uTime) * uAmp.z\n          );\n        }\n      `,\n        getJS: (progress, time) => {\n          let movementProgressFix = 0.02;\n          let uFreq = mountainUniforms.uFreq.value;\n          let uAmp = mountainUniforms.uAmp.value;\n          let distortion = new THREE.Vector3(Math.cos(progress * Math.PI * uFreq.x + time) * uAmp.x - Math.cos(movementProgressFix * Math.PI * uFreq.x + time) * uAmp.x, nsin(progress * Math.PI * uFreq.y + time) * uAmp.y - nsin(movementProgressFix * Math.PI * uFreq.y + time) * uAmp.y, nsin(progress * Math.PI * uFreq.z + time) * uAmp.z - nsin(movementProgressFix * Math.PI * uFreq.z + time) * uAmp.z);\n          let lookAtAmp = new THREE.Vector3(2, 2, 2);\n          let lookAtOffset = new THREE.Vector3(0, 0, -5);\n          return distortion.multiply(lookAtAmp).add(lookAtOffset);\n        }\n      },\n      xyDistortion: {\n        uniforms: xyUniforms,\n        getDistortion: `\n        uniform vec2 uFreq;\n        uniform vec2 uAmp;\n        #define PI 3.14159265358979\n        vec3 getDistortion(float progress){\n          float movementProgressFix = 0.02;\n          return vec3( \n            cos(progress * PI * uFreq.x + uTime) * uAmp.x - cos(movementProgressFix * PI * uFreq.x + uTime) * uAmp.x,\n            sin(progress * PI * uFreq.y + PI/2. + uTime) * uAmp.y - sin(movementProgressFix * PI * uFreq.y + PI/2. + uTime) * uAmp.y,\n            0.\n          );\n        }\n      `,\n        getJS: (progress, time) => {\n          let movementProgressFix = 0.02;\n          let uFreq = xyUniforms.uFreq.value;\n          let uAmp = xyUniforms.uAmp.value;\n          let distortion = new THREE.Vector3(Math.cos(progress * Math.PI * uFreq.x + time) * uAmp.x - Math.cos(movementProgressFix * Math.PI * uFreq.x + time) * uAmp.x, Math.sin(progress * Math.PI * uFreq.y + time + Math.PI / 2) * uAmp.y - Math.sin(movementProgressFix * Math.PI * uFreq.y + time + Math.PI / 2) * uAmp.y, 0);\n          let lookAtAmp = new THREE.Vector3(2, 0.4, 1);\n          let lookAtOffset = new THREE.Vector3(0, 0, -3);\n          return distortion.multiply(lookAtAmp).add(lookAtOffset);\n        }\n      },\n      LongRaceDistortion: {\n        uniforms: LongRaceUniforms,\n        getDistortion: `\n        uniform vec2 uFreq;\n        uniform vec2 uAmp;\n        #define PI 3.14159265358979\n        vec3 getDistortion(float progress){\n          float camProgress = 0.0125;\n          return vec3( \n            sin(progress * PI * uFreq.x + uTime) * uAmp.x - sin(camProgress * PI * uFreq.x + uTime) * uAmp.x,\n            sin(progress * PI * uFreq.y + uTime) * uAmp.y - sin(camProgress * PI * uFreq.y + uTime) * uAmp.y,\n            0.\n          );\n        }\n      `,\n        getJS: (progress, time) => {\n          let camProgress = 0.0125;\n          let uFreq = LongRaceUniforms.uFreq.value;\n          let uAmp = LongRaceUniforms.uAmp.value;\n          let distortion = new THREE.Vector3(Math.sin(progress * Math.PI * uFreq.x + time) * uAmp.x - Math.sin(camProgress * Math.PI * uFreq.x + time) * uAmp.x, Math.sin(progress * Math.PI * uFreq.y + time) * uAmp.y - Math.sin(camProgress * Math.PI * uFreq.y + time) * uAmp.y, 0);\n          let lookAtAmp = new THREE.Vector3(1, 1, 0);\n          let lookAtOffset = new THREE.Vector3(0, 0, -5);\n          return distortion.multiply(lookAtAmp).add(lookAtOffset);\n        }\n      },\n      turbulentDistortion: {\n        uniforms: turbulentUniforms,\n        getDistortion: `\n        uniform vec4 uFreq;\n        uniform vec4 uAmp;\n        float nsin(float val){\n          return sin(val) * 0.5 + 0.5;\n        }\n        #define PI 3.14159265358979\n        float getDistortionX(float progress){\n          return (\n            cos(PI * progress * uFreq.r + uTime) * uAmp.r +\n            pow(cos(PI * progress * uFreq.g + uTime * (uFreq.g / uFreq.r)), 2. ) * uAmp.g\n          );\n        }\n        float getDistortionY(float progress){\n          return (\n            -nsin(PI * progress * uFreq.b + uTime) * uAmp.b +\n            -pow(nsin(PI * progress * uFreq.a + uTime / (uFreq.b / uFreq.a)), 5.) * uAmp.a\n          );\n        }\n        vec3 getDistortion(float progress){\n          return vec3(\n            getDistortionX(progress) - getDistortionX(0.0125),\n            getDistortionY(progress) - getDistortionY(0.0125),\n            0.\n          );\n        }\n      `,\n        getJS: (progress, time) => {\n          const uFreq = turbulentUniforms.uFreq.value;\n          const uAmp = turbulentUniforms.uAmp.value;\n          const getX = p => Math.cos(Math.PI * p * uFreq.x + time) * uAmp.x + Math.pow(Math.cos(Math.PI * p * uFreq.y + time * (uFreq.y / uFreq.x)), 2) * uAmp.y;\n          const getY = p => -nsin(Math.PI * p * uFreq.z + time) * uAmp.z - Math.pow(nsin(Math.PI * p * uFreq.w + time / (uFreq.z / uFreq.w)), 5) * uAmp.w;\n          let distortion = new THREE.Vector3(getX(progress) - getX(progress + 0.007), getY(progress) - getY(progress + 0.007), 0);\n          let lookAtAmp = new THREE.Vector3(-2, -5, 0);\n          let lookAtOffset = new THREE.Vector3(0, 0, -10);\n          return distortion.multiply(lookAtAmp).add(lookAtOffset);\n        }\n      },\n      turbulentDistortionStill: {\n        uniforms: turbulentUniforms,\n        getDistortion: `\n        uniform vec4 uFreq;\n        uniform vec4 uAmp;\n        float nsin(float val){\n          return sin(val) * 0.5 + 0.5;\n        }\n        #define PI 3.14159265358979\n        float getDistortionX(float progress){\n          return (\n            cos(PI * progress * uFreq.r) * uAmp.r +\n            pow(cos(PI * progress * uFreq.g * (uFreq.g / uFreq.r)), 2. ) * uAmp.g\n          );\n        }\n        float getDistortionY(float progress){\n          return (\n            -nsin(PI * progress * uFreq.b) * uAmp.b +\n            -pow(nsin(PI * progress * uFreq.a / (uFreq.b / uFreq.a)), 5.) * uAmp.a\n          );\n        }\n        vec3 getDistortion(float progress){\n          return vec3(\n            getDistortionX(progress) - getDistortionX(0.02),\n            getDistortionY(progress) - getDistortionY(0.02),\n            0.\n          );\n        }\n      `\n      },\n      deepDistortionStill: {\n        uniforms: deepUniforms,\n        getDistortion: `\n        uniform vec4 uFreq;\n        uniform vec4 uAmp;\n        uniform vec2 uPowY;\n        float nsin(float val){\n          return sin(val) * 0.5 + 0.5;\n        }\n        #define PI 3.14159265358979\n        float getDistortionX(float progress){\n          return (\n            sin(progress * PI * uFreq.x) * uAmp.x * 2.\n          );\n        }\n        float getDistortionY(float progress){\n          return (\n            pow(abs(progress * uPowY.x), uPowY.y) + sin(progress * PI * uFreq.y) * uAmp.y\n          );\n        }\n        vec3 getDistortion(float progress){\n          return vec3(\n            getDistortionX(progress) - getDistortionX(0.02),\n            getDistortionY(progress) - getDistortionY(0.05),\n            0.\n          );\n        }\n      `\n      },\n      deepDistortion: {\n        uniforms: deepUniforms,\n        getDistortion: `\n        uniform vec4 uFreq;\n        uniform vec4 uAmp;\n        uniform vec2 uPowY;\n        float nsin(float val){\n          return sin(val) * 0.5 + 0.5;\n        }\n        #define PI 3.14159265358979\n        float getDistortionX(float progress){\n          return (\n            sin(progress * PI * uFreq.x + uTime) * uAmp.x\n          );\n        }\n        float getDistortionY(float progress){\n          return (\n            pow(abs(progress * uPowY.x), uPowY.y) + sin(progress * PI * uFreq.y + uTime) * uAmp.y\n          );\n        }\n        vec3 getDistortion(float progress){\n          return vec3(\n            getDistortionX(progress) - getDistortionX(0.02),\n            getDistortionY(progress) - getDistortionY(0.02),\n            0.\n          );\n        }\n      `,\n        getJS: (progress, time) => {\n          const uFreq = deepUniforms.uFreq.value;\n          const uAmp = deepUniforms.uAmp.value;\n          const uPowY = deepUniforms.uPowY.value;\n          const getX = p => Math.sin(p * Math.PI * uFreq.x + time) * uAmp.x;\n          const getY = p => Math.pow(p * uPowY.x, uPowY.y) + Math.sin(p * Math.PI * uFreq.y + time) * uAmp.y;\n          let distortion = new THREE.Vector3(getX(progress) - getX(progress + 0.01), getY(progress) - getY(progress + 0.01), 0);\n          let lookAtAmp = new THREE.Vector3(-2, -4, 0);\n          let lookAtOffset = new THREE.Vector3(0, 0, -10);\n          return distortion.multiply(lookAtAmp).add(lookAtOffset);\n        }\n      }\n    };\n    class App {\n      constructor(container, options = {}) {\n        this.options = options;\n        if (this.options.distortion == null) {\n          this.options.distortion = {\n            uniforms: distortion_uniforms,\n            getDistortion: distortion_vertex\n          };\n        }\n        this.container = container;\n        this.renderer = new THREE.WebGLRenderer({\n          antialias: false,\n          alpha: true\n        });\n        this.renderer.setSize(container.offsetWidth, container.offsetHeight, false);\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.composer = new EffectComposer(this.renderer);\n        container.append(this.renderer.domElement);\n        this.camera = new THREE.PerspectiveCamera(options.fov, container.offsetWidth / container.offsetHeight, 0.1, 10000);\n        this.camera.position.z = -5;\n        this.camera.position.y = 8;\n        this.camera.position.x = 0;\n        this.scene = new THREE.Scene();\n        this.scene.background = null;\n        let fog = new THREE.Fog(options.colors.background, options.length * 0.2, options.length * 500);\n        this.scene.fog = fog;\n        this.fogUniforms = {\n          fogColor: {\n            value: fog.color\n          },\n          fogNear: {\n            value: fog.near\n          },\n          fogFar: {\n            value: fog.far\n          }\n        };\n        this.clock = new THREE.Clock();\n        this.assets = {};\n        this.disposed = false;\n        this.road = new Road(this, options);\n        this.leftCarLights = new CarLights(this, options, options.colors.leftCars, options.movingAwaySpeed, new THREE.Vector2(0, 1 - options.carLightsFade));\n        this.rightCarLights = new CarLights(this, options, options.colors.rightCars, options.movingCloserSpeed, new THREE.Vector2(1, 0 + options.carLightsFade));\n        this.leftSticks = new LightsSticks(this, options);\n        this.fovTarget = options.fov;\n        this.speedUpTarget = 0;\n        this.speedUp = 0;\n        this.timeOffset = 0;\n        this.tick = this.tick.bind(this);\n        this.init = this.init.bind(this);\n        this.setSize = this.setSize.bind(this);\n        this.onMouseDown = this.onMouseDown.bind(this);\n        this.onMouseUp = this.onMouseUp.bind(this);\n      }\n      initPasses() {\n        this.renderPass = new RenderPass(this.scene, this.camera);\n        this.bloomPass = new EffectPass(this.camera, new BloomEffect({\n          luminanceThreshold: 0.2,\n          luminanceSmoothing: 0,\n          resolutionScale: 1\n        }));\n        const smaaPass = new EffectPass(this.camera, new SMAAEffect({\n          preset: SMAAPreset.MEDIUM,\n          searchImage: SMAAEffect.searchImageDataURL,\n          areaImage: SMAAEffect.areaImageDataURL\n        }));\n        this.renderPass.renderToScreen = false;\n        this.bloomPass.renderToScreen = false;\n        smaaPass.renderToScreen = true;\n        this.composer.addPass(this.renderPass);\n        this.composer.addPass(this.bloomPass);\n        this.composer.addPass(smaaPass);\n      }\n      loadAssets() {\n        const assets = this.assets;\n        return new Promise(resolve => {\n          const manager = new THREE.LoadingManager(resolve);\n          const searchImage = new Image();\n          const areaImage = new Image();\n          assets.smaa = {};\n          searchImage.addEventListener(\"load\", function () {\n            assets.smaa.search = this;\n            manager.itemEnd(\"smaa-search\");\n          });\n          areaImage.addEventListener(\"load\", function () {\n            assets.smaa.area = this;\n            manager.itemEnd(\"smaa-area\");\n          });\n          manager.itemStart(\"smaa-search\");\n          manager.itemStart(\"smaa-area\");\n          searchImage.src = SMAAEffect.searchImageDataURL;\n          areaImage.src = SMAAEffect.areaImageDataURL;\n        });\n      }\n      init() {\n        this.initPasses();\n        const options = this.options;\n        this.road.init();\n        this.leftCarLights.init();\n        this.leftCarLights.mesh.position.setX(-options.roadWidth / 2 - options.islandWidth / 2);\n        this.rightCarLights.init();\n        this.rightCarLights.mesh.position.setX(options.roadWidth / 2 + options.islandWidth / 2);\n        this.leftSticks.init();\n        this.leftSticks.mesh.position.setX(-(options.roadWidth + options.islandWidth / 2));\n        this.container.addEventListener(\"mousedown\", this.onMouseDown);\n        this.container.addEventListener(\"mouseup\", this.onMouseUp);\n        this.container.addEventListener(\"mouseout\", this.onMouseUp);\n        this.tick();\n      }\n      onMouseDown(ev) {\n        if (this.options.onSpeedUp) this.options.onSpeedUp(ev);\n        this.fovTarget = this.options.fovSpeedUp;\n        this.speedUpTarget = this.options.speedUp;\n      }\n      onMouseUp(ev) {\n        if (this.options.onSlowDown) this.options.onSlowDown(ev);\n        this.fovTarget = this.options.fov;\n        this.speedUpTarget = 0;\n      }\n      update(delta) {\n        let lerpPercentage = Math.exp(-(-60 * Math.log2(1 - 0.1)) * delta);\n        this.speedUp += lerp(this.speedUp, this.speedUpTarget, lerpPercentage, 0.00001);\n        this.timeOffset += this.speedUp * delta;\n        let time = this.clock.elapsedTime + this.timeOffset;\n        this.rightCarLights.update(time);\n        this.leftCarLights.update(time);\n        this.leftSticks.update(time);\n        this.road.update(time);\n        let updateCamera = false;\n        let fovChange = lerp(this.camera.fov, this.fovTarget, lerpPercentage);\n        if (fovChange !== 0) {\n          this.camera.fov += fovChange * delta * 6;\n          updateCamera = true;\n        }\n        if (this.options.distortion.getJS) {\n          const distortion = this.options.distortion.getJS(0.025, time);\n          this.camera.lookAt(new THREE.Vector3(this.camera.position.x + distortion.x, this.camera.position.y + distortion.y, this.camera.position.z + distortion.z));\n          updateCamera = true;\n        }\n        if (updateCamera) {\n          this.camera.updateProjectionMatrix();\n        }\n        if (this.options.isHyper) {\n          console.log(this.options.isHyper);\n        }\n      }\n      render(delta) {\n        this.composer.render(delta);\n      }\n      dispose() {\n        this.disposed = true;\n      }\n      setSize(width, height, updateStyles) {\n        this.composer.setSize(width, height, updateStyles);\n      }\n      tick() {\n        if (this.disposed || !this) return;\n        if (resizeRendererToDisplaySize(this.renderer, this.setSize)) {\n          const canvas = this.renderer.domElement;\n          this.camera.aspect = canvas.clientWidth / canvas.clientHeight;\n          this.camera.updateProjectionMatrix();\n        }\n        const delta = this.clock.getDelta();\n        this.render(delta);\n        this.update(delta);\n        requestAnimationFrame(this.tick);\n      }\n    }\n    const distortion_uniforms = {\n      uDistortionX: {\n        value: new THREE.Vector2(80, 3)\n      },\n      uDistortionY: {\n        value: new THREE.Vector2(-40, 2.5)\n      }\n    };\n    const distortion_vertex = `\n    #define PI 3.14159265358979\n    uniform vec2 uDistortionX;\n    uniform vec2 uDistortionY;\n    float nsin(float val){\n      return sin(val) * 0.5 + 0.5;\n    }\n    vec3 getDistortion(float progress){\n      progress = clamp(progress, 0., 1.);\n      float xAmp = uDistortionX.r;\n      float xFreq = uDistortionX.g;\n      float yAmp = uDistortionY.r;\n      float yFreq = uDistortionY.g;\n      return vec3( \n        xAmp * nsin(progress * PI * xFreq - PI / 2.),\n        yAmp * nsin(progress * PI * yFreq - PI / 2.),\n        0.\n      );\n    }\n  `;\n    const random = base => {\n      if (Array.isArray(base)) return Math.random() * (base[1] - base[0]) + base[0];\n      return Math.random() * base;\n    };\n    const pickRandom = arr => {\n      if (Array.isArray(arr)) return arr[Math.floor(Math.random() * arr.length)];\n      return arr;\n    };\n    function lerp(current, target, speed = 0.1, limit = 0.001) {\n      let change = (target - current) * speed;\n      if (Math.abs(change) < limit) {\n        change = target - current;\n      }\n      return change;\n    }\n    class CarLights {\n      constructor(webgl, options, colors, speed, fade) {\n        this.webgl = webgl;\n        this.options = options;\n        this.colors = colors;\n        this.speed = speed;\n        this.fade = fade;\n      }\n      init() {\n        const options = this.options;\n        let curve = new THREE.LineCurve3(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, -1));\n        let geometry = new THREE.TubeGeometry(curve, 40, 1, 8, false);\n        let instanced = new THREE.InstancedBufferGeometry().copy(geometry);\n        instanced.instanceCount = options.lightPairsPerRoadWay * 2;\n        let laneWidth = options.roadWidth / options.lanesPerRoad;\n        let aOffset = [];\n        let aMetrics = [];\n        let aColor = [];\n        let colors = this.colors;\n        if (Array.isArray(colors)) {\n          colors = colors.map(c => new THREE.Color(c));\n        } else {\n          colors = new THREE.Color(colors);\n        }\n        for (let i = 0; i < options.lightPairsPerRoadWay; i++) {\n          let radius = random(options.carLightsRadius);\n          let length = random(options.carLightsLength);\n          let speed = random(this.speed);\n          let carLane = i % options.lanesPerRoad;\n          let laneX = carLane * laneWidth - options.roadWidth / 2 + laneWidth / 2;\n          let carWidth = random(options.carWidthPercentage) * laneWidth;\n          let carShiftX = random(options.carShiftX) * laneWidth;\n          laneX += carShiftX;\n          let offsetY = random(options.carFloorSeparation) + radius * 1.3;\n          let offsetZ = -random(options.length);\n          aOffset.push(laneX - carWidth / 2);\n          aOffset.push(offsetY);\n          aOffset.push(offsetZ);\n          aOffset.push(laneX + carWidth / 2);\n          aOffset.push(offsetY);\n          aOffset.push(offsetZ);\n          aMetrics.push(radius);\n          aMetrics.push(length);\n          aMetrics.push(speed);\n          aMetrics.push(radius);\n          aMetrics.push(length);\n          aMetrics.push(speed);\n          let color = pickRandom(colors);\n          aColor.push(color.r);\n          aColor.push(color.g);\n          aColor.push(color.b);\n          aColor.push(color.r);\n          aColor.push(color.g);\n          aColor.push(color.b);\n        }\n        instanced.setAttribute(\"aOffset\", new THREE.InstancedBufferAttribute(new Float32Array(aOffset), 3, false));\n        instanced.setAttribute(\"aMetrics\", new THREE.InstancedBufferAttribute(new Float32Array(aMetrics), 3, false));\n        instanced.setAttribute(\"aColor\", new THREE.InstancedBufferAttribute(new Float32Array(aColor), 3, false));\n        let material = new THREE.ShaderMaterial({\n          fragmentShader: carLightsFragment,\n          vertexShader: carLightsVertex,\n          transparent: true,\n          uniforms: Object.assign({\n            uTime: {\n              value: 0\n            },\n            uTravelLength: {\n              value: options.length\n            },\n            uFade: {\n              value: this.fade\n            }\n          }, this.webgl.fogUniforms, options.distortion.uniforms)\n        });\n        material.onBeforeCompile = shader => {\n          shader.vertexShader = shader.vertexShader.replace(\"#include <getDistortion_vertex>\", options.distortion.getDistortion);\n        };\n        let mesh = new THREE.Mesh(instanced, material);\n        mesh.frustumCulled = false;\n        this.webgl.scene.add(mesh);\n        this.mesh = mesh;\n      }\n      update(time) {\n        this.mesh.material.uniforms.uTime.value = time;\n      }\n    }\n    const carLightsFragment = `\n    #define USE_FOG;\n    ${THREE.ShaderChunk[\"fog_pars_fragment\"]}\n    varying vec3 vColor;\n    varying vec2 vUv; \n    uniform vec2 uFade;\n    void main() {\n      vec3 color = vec3(vColor);\n      float alpha = smoothstep(uFade.x, uFade.y, vUv.x);\n      gl_FragColor = vec4(color, alpha);\n      if (gl_FragColor.a < 0.0001) discard;\n      ${THREE.ShaderChunk[\"fog_fragment\"]}\n    }\n  `;\n    const carLightsVertex = `\n    #define USE_FOG;\n    ${THREE.ShaderChunk[\"fog_pars_vertex\"]}\n    attribute vec3 aOffset;\n    attribute vec3 aMetrics;\n    attribute vec3 aColor;\n    uniform float uTravelLength;\n    uniform float uTime;\n    varying vec2 vUv; \n    varying vec3 vColor; \n    #include <getDistortion_vertex>\n    void main() {\n      vec3 transformed = position.xyz;\n      float radius = aMetrics.r;\n      float myLength = aMetrics.g;\n      float speed = aMetrics.b;\n\n      transformed.xy *= radius;\n      transformed.z *= myLength;\n\n      transformed.z += myLength - mod(uTime * speed + aOffset.z, uTravelLength);\n      transformed.xy += aOffset.xy;\n\n      float progress = abs(transformed.z / uTravelLength);\n      transformed.xyz += getDistortion(progress);\n\n      vec4 mvPosition = modelViewMatrix * vec4(transformed, 1.);\n      gl_Position = projectionMatrix * mvPosition;\n      vUv = uv;\n      vColor = aColor;\n      ${THREE.ShaderChunk[\"fog_vertex\"]}\n    }\n  `;\n    class LightsSticks {\n      constructor(webgl, options) {\n        this.webgl = webgl;\n        this.options = options;\n      }\n      init() {\n        const options = this.options;\n        const geometry = new THREE.PlaneGeometry(1, 1);\n        let instanced = new THREE.InstancedBufferGeometry().copy(geometry);\n        let totalSticks = options.totalSideLightSticks;\n        instanced.instanceCount = totalSticks;\n        let stickoffset = options.length / (totalSticks - 1);\n        const aOffset = [];\n        const aColor = [];\n        const aMetrics = [];\n        let colors = options.colors.sticks;\n        if (Array.isArray(colors)) {\n          colors = colors.map(c => new THREE.Color(c));\n        } else {\n          colors = new THREE.Color(colors);\n        }\n        for (let i = 0; i < totalSticks; i++) {\n          let width = random(options.lightStickWidth);\n          let height = random(options.lightStickHeight);\n          aOffset.push((i - 1) * stickoffset * 2 + stickoffset * Math.random());\n          let color = pickRandom(colors);\n          aColor.push(color.r);\n          aColor.push(color.g);\n          aColor.push(color.b);\n          aMetrics.push(width);\n          aMetrics.push(height);\n        }\n        instanced.setAttribute(\"aOffset\", new THREE.InstancedBufferAttribute(new Float32Array(aOffset), 1, false));\n        instanced.setAttribute(\"aColor\", new THREE.InstancedBufferAttribute(new Float32Array(aColor), 3, false));\n        instanced.setAttribute(\"aMetrics\", new THREE.InstancedBufferAttribute(new Float32Array(aMetrics), 2, false));\n        const material = new THREE.ShaderMaterial({\n          fragmentShader: sideSticksFragment,\n          vertexShader: sideSticksVertex,\n          side: THREE.DoubleSide,\n          uniforms: Object.assign({\n            uTravelLength: {\n              value: options.length\n            },\n            uTime: {\n              value: 0\n            }\n          }, this.webgl.fogUniforms, options.distortion.uniforms)\n        });\n        material.onBeforeCompile = shader => {\n          shader.vertexShader = shader.vertexShader.replace(\"#include <getDistortion_vertex>\", options.distortion.getDistortion);\n        };\n        const mesh = new THREE.Mesh(instanced, material);\n        mesh.frustumCulled = false;\n        this.webgl.scene.add(mesh);\n        this.mesh = mesh;\n      }\n      update(time) {\n        this.mesh.material.uniforms.uTime.value = time;\n      }\n    }\n    const sideSticksVertex = `\n    #define USE_FOG;\n    ${THREE.ShaderChunk[\"fog_pars_vertex\"]}\n    attribute float aOffset;\n    attribute vec3 aColor;\n    attribute vec2 aMetrics;\n    uniform float uTravelLength;\n    uniform float uTime;\n    varying vec3 vColor;\n    mat4 rotationY( in float angle ) {\n      return mat4(\tcos(angle),\t\t0,\t\tsin(angle),\t0,\n                   0,\t\t1.0,\t\t\t 0,\t0,\n              -sin(angle),\t0,\t\tcos(angle),\t0,\n              0, \t\t0,\t\t\t\t0,\t1);\n    }\n    #include <getDistortion_vertex>\n    void main(){\n      vec3 transformed = position.xyz;\n      float width = aMetrics.x;\n      float height = aMetrics.y;\n\n      transformed.xy *= vec2(width, height);\n      float time = mod(uTime * 60. * 2. + aOffset, uTravelLength);\n\n      transformed = (rotationY(3.14/2.) * vec4(transformed,1.)).xyz;\n\n      transformed.z += - uTravelLength + time;\n\n      float progress = abs(transformed.z / uTravelLength);\n      transformed.xyz += getDistortion(progress);\n\n      transformed.y += height / 2.;\n      transformed.x += -width / 2.;\n      vec4 mvPosition = modelViewMatrix * vec4(transformed, 1.);\n      gl_Position = projectionMatrix * mvPosition;\n      vColor = aColor;\n      ${THREE.ShaderChunk[\"fog_vertex\"]}\n    }\n  `;\n    const sideSticksFragment = `\n    #define USE_FOG;\n    ${THREE.ShaderChunk[\"fog_pars_fragment\"]}\n    varying vec3 vColor;\n    void main(){\n      vec3 color = vec3(vColor);\n      gl_FragColor = vec4(color,1.);\n      ${THREE.ShaderChunk[\"fog_fragment\"]}\n    }\n  `;\n    class Road {\n      constructor(webgl, options) {\n        this.webgl = webgl;\n        this.options = options;\n        this.uTime = {\n          value: 0\n        };\n      }\n      createPlane(side, width, isRoad) {\n        const options = this.options;\n        let segments = 100;\n        const geometry = new THREE.PlaneGeometry(isRoad ? options.roadWidth : options.islandWidth, options.length, 20, segments);\n        let uniforms = {\n          uTravelLength: {\n            value: options.length\n          },\n          uColor: {\n            value: new THREE.Color(isRoad ? options.colors.roadColor : options.colors.islandColor)\n          },\n          uTime: this.uTime\n        };\n        if (isRoad) {\n          uniforms = Object.assign(uniforms, {\n            uLanes: {\n              value: options.lanesPerRoad\n            },\n            uBrokenLinesColor: {\n              value: new THREE.Color(options.colors.brokenLines)\n            },\n            uShoulderLinesColor: {\n              value: new THREE.Color(options.colors.shoulderLines)\n            },\n            uShoulderLinesWidthPercentage: {\n              value: options.shoulderLinesWidthPercentage\n            },\n            uBrokenLinesLengthPercentage: {\n              value: options.brokenLinesLengthPercentage\n            },\n            uBrokenLinesWidthPercentage: {\n              value: options.brokenLinesWidthPercentage\n            }\n          });\n        }\n        const material = new THREE.ShaderMaterial({\n          fragmentShader: isRoad ? roadFragment : islandFragment,\n          vertexShader: roadVertex,\n          side: THREE.DoubleSide,\n          uniforms: Object.assign(uniforms, this.webgl.fogUniforms, options.distortion.uniforms)\n        });\n        material.onBeforeCompile = shader => {\n          shader.vertexShader = shader.vertexShader.replace(\"#include <getDistortion_vertex>\", options.distortion.getDistortion);\n        };\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.rotation.x = -Math.PI / 2;\n        mesh.position.z = -options.length / 2;\n        mesh.position.x += (this.options.islandWidth / 2 + options.roadWidth / 2) * side;\n        this.webgl.scene.add(mesh);\n        return mesh;\n      }\n      init() {\n        this.leftRoadWay = this.createPlane(-1, this.options.roadWidth, true);\n        this.rightRoadWay = this.createPlane(1, this.options.roadWidth, true);\n        this.island = this.createPlane(0, this.options.islandWidth, false);\n      }\n      update(time) {\n        this.uTime.value = time;\n      }\n    }\n    const roadBaseFragment = `\n    #define USE_FOG;\n    varying vec2 vUv; \n    uniform vec3 uColor;\n    uniform float uTime;\n    #include <roadMarkings_vars>\n    ${THREE.ShaderChunk[\"fog_pars_fragment\"]}\n    void main() {\n      vec2 uv = vUv;\n      vec3 color = vec3(uColor);\n      #include <roadMarkings_fragment>\n      gl_FragColor = vec4(color, 1.);\n      ${THREE.ShaderChunk[\"fog_fragment\"]}\n    }\n  `;\n    const islandFragment = roadBaseFragment.replace(\"#include <roadMarkings_fragment>\", \"\").replace(\"#include <roadMarkings_vars>\", \"\");\n    const roadMarkings_vars = `\n    uniform float uLanes;\n    uniform vec3 uBrokenLinesColor;\n    uniform vec3 uShoulderLinesColor;\n    uniform float uShoulderLinesWidthPercentage;\n    uniform float uBrokenLinesWidthPercentage;\n    uniform float uBrokenLinesLengthPercentage;\n    highp float random(vec2 co) {\n      highp float a = 12.9898;\n      highp float b = 78.233;\n      highp float c = 43758.5453;\n      highp float dt = dot(co.xy, vec2(a, b));\n      highp float sn = mod(dt, 3.14);\n      return fract(sin(sn) * c);\n    }\n  `;\n    const roadMarkings_fragment = `\n    uv.y = mod(uv.y + uTime * 0.05, 1.);\n    float laneWidth = 1.0 / uLanes;\n    float brokenLineWidth = laneWidth * uBrokenLinesWidthPercentage;\n    float laneEmptySpace = 1. - uBrokenLinesLengthPercentage;\n\n    float brokenLines = step(1.0 - brokenLineWidth, fract(uv.x * 2.0)) * step(laneEmptySpace, fract(uv.y * 10.0));\n    float sideLines = step(1.0 - brokenLineWidth, fract((uv.x - laneWidth * (uLanes - 1.0)) * 2.0)) + step(brokenLineWidth, uv.x);\n\n    brokenLines = mix(brokenLines, sideLines, uv.x);\n  `;\n    const roadFragment = roadBaseFragment.replace(\"#include <roadMarkings_fragment>\", roadMarkings_fragment).replace(\"#include <roadMarkings_vars>\", roadMarkings_vars);\n    const roadVertex = `\n    #define USE_FOG;\n    uniform float uTime;\n    ${THREE.ShaderChunk[\"fog_pars_vertex\"]}\n    uniform float uTravelLength;\n    varying vec2 vUv; \n    #include <getDistortion_vertex>\n    void main() {\n      vec3 transformed = position.xyz;\n      vec3 distortion = getDistortion((transformed.y + uTravelLength / 2.) / uTravelLength);\n      transformed.x += distortion.x;\n      transformed.z += distortion.y;\n      transformed.y += -1. * distortion.z;  \n      \n      vec4 mvPosition = modelViewMatrix * vec4(transformed, 1.);\n      gl_Position = projectionMatrix * mvPosition;\n      vUv = uv;\n      ${THREE.ShaderChunk[\"fog_vertex\"]}\n    }\n  `;\n    function resizeRendererToDisplaySize(renderer, setSize) {\n      const canvas = renderer.domElement;\n      const width = canvas.clientWidth;\n      const height = canvas.clientHeight;\n      const needResize = canvas.width !== width || canvas.height !== height;\n      if (needResize) {\n        setSize(width, height, false);\n      }\n      return needResize;\n    }\n    (function () {\n      const container = document.getElementById('lights');\n      effectOptions.distortion = distortions[effectOptions.distortion];\n      const myApp = new App(container, effectOptions);\n      myApp.loadAssets().then(myApp.init);\n    })();\n  }, [effectOptions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"lights\",\n    ref: hyperspeed\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1083,\n    columnNumber: 3\n  }, this);\n};\n_s(Hyperspeed, \"6/6hub57J+IxztEG6Yywtv0wPMk=\");\n_c = Hyperspeed;\nexport default Hyperspeed;\nvar _c;\n$RefreshReg$(_c, \"Hyperspeed\");","map":{"version":3,"names":["useEffect","useRef","THREE","BloomEffect","EffectComposer","EffectPass","RenderPass","SMAAEffect","SMAAPreset","jsxDEV","_jsxDEV","Hyperspeed","effectOptions","onSpeedUp","onSlowDown","distortion","length","roadWidth","islandWidth","lanesPerRoad","fov","fovSpeedUp","speedUp","carLightsFade","totalSideLightSticks","lightPairsPerRoadWay","shoulderLinesWidthPercentage","brokenLinesWidthPercentage","brokenLinesLengthPercentage","lightStickWidth","lightStickHeight","movingAwaySpeed","movingCloserSpeed","carLightsLength","carLightsRadius","carWidthPercentage","carShiftX","carFloorSeparation","colors","roadColor","islandColor","background","shoulderLines","brokenLines","leftCars","rightCars","sticks","_s","hyperspeed","mountainUniforms","uFreq","value","Vector3","uAmp","xyUniforms","Vector2","LongRaceUniforms","turbulentUniforms","Vector4","deepUniforms","uPowY","nsin","val","Math","sin","distortions","mountainDistortion","uniforms","getDistortion","getJS","progress","time","movementProgressFix","cos","PI","x","y","z","lookAtAmp","lookAtOffset","multiply","add","xyDistortion","LongRaceDistortion","camProgress","turbulentDistortion","getX","p","pow","getY","w","turbulentDistortionStill","deepDistortionStill","deepDistortion","App","constructor","container","options","distortion_uniforms","distortion_vertex","renderer","WebGLRenderer","antialias","alpha","setSize","offsetWidth","offsetHeight","setPixelRatio","window","devicePixelRatio","composer","append","domElement","camera","PerspectiveCamera","position","scene","Scene","fog","Fog","fogUniforms","fogColor","color","fogNear","near","fogFar","far","clock","Clock","assets","disposed","road","Road","leftCarLights","CarLights","rightCarLights","leftSticks","LightsSticks","fovTarget","speedUpTarget","timeOffset","tick","bind","init","onMouseDown","onMouseUp","initPasses","renderPass","bloomPass","luminanceThreshold","luminanceSmoothing","resolutionScale","smaaPass","preset","MEDIUM","searchImage","searchImageDataURL","areaImage","areaImageDataURL","renderToScreen","addPass","loadAssets","Promise","resolve","manager","LoadingManager","Image","smaa","addEventListener","search","itemEnd","area","itemStart","src","mesh","setX","ev","update","delta","lerpPercentage","exp","log2","lerp","elapsedTime","updateCamera","fovChange","lookAt","updateProjectionMatrix","isHyper","console","log","render","dispose","width","height","updateStyles","resizeRendererToDisplaySize","canvas","aspect","clientWidth","clientHeight","getDelta","requestAnimationFrame","uDistortionX","uDistortionY","random","base","Array","isArray","pickRandom","arr","floor","current","target","speed","limit","change","abs","webgl","fade","curve","LineCurve3","geometry","TubeGeometry","instanced","InstancedBufferGeometry","copy","instanceCount","laneWidth","aOffset","aMetrics","aColor","map","c","Color","i","radius","carLane","laneX","carWidth","offsetY","offsetZ","push","r","g","b","setAttribute","InstancedBufferAttribute","Float32Array","material","ShaderMaterial","fragmentShader","carLightsFragment","vertexShader","carLightsVertex","transparent","Object","assign","uTime","uTravelLength","uFade","onBeforeCompile","shader","replace","Mesh","frustumCulled","ShaderChunk","PlaneGeometry","totalSticks","stickoffset","sideSticksFragment","sideSticksVertex","side","DoubleSide","createPlane","isRoad","segments","uColor","uLanes","uBrokenLinesColor","uShoulderLinesColor","uShoulderLinesWidthPercentage","uBrokenLinesLengthPercentage","uBrokenLinesWidthPercentage","roadFragment","islandFragment","roadVertex","rotation","leftRoadWay","rightRoadWay","island","roadBaseFragment","roadMarkings_vars","roadMarkings_fragment","needResize","document","getElementById","myApp","then","id","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Abhishek Kumar Roy/OneDrive/Desktop/finance_tracker/finance_tracker/src/components/Hyperspeed.js"],"sourcesContent":["import { useEffect, useRef } from \"react\";\r\nimport * as THREE from 'three';\r\nimport { BloomEffect, EffectComposer, EffectPass, RenderPass, SMAAEffect, SMAAPreset } from 'postprocessing';\r\n\r\nimport './Hyperspeed.css';\r\n\r\nconst Hyperspeed = ({ effectOptions = {\r\nonSpeedUp: () => { },\r\nonSlowDown: () => { },\r\ndistortion: 'turbulentDistortion',\r\nlength: 400,\r\nroadWidth: 10,\r\nislandWidth: 2,\r\nlanesPerRoad: 4,\r\nfov: 90,\r\nfovSpeedUp: 150,\r\nspeedUp: 2,\r\ncarLightsFade: 0.4,\r\ntotalSideLightSticks: 20,\r\nlightPairsPerRoadWay: 40,\r\nshoulderLinesWidthPercentage: 0.05,\r\nbrokenLinesWidthPercentage: 0.1,\r\nbrokenLinesLengthPercentage: 0.5,\r\nlightStickWidth: [0.12, 0.5],\r\nlightStickHeight: [1.3, 1.7],\r\nmovingAwaySpeed: [60, 80],\r\nmovingCloserSpeed: [-120, -160],\r\ncarLightsLength: [400 * 0.03, 400 * 0.2],\r\ncarLightsRadius: [0.05, 0.14],\r\ncarWidthPercentage: [0.3, 0.5],\r\ncarShiftX: [-0.8, 0.8],\r\ncarFloorSeparation: [0, 5],\r\ncolors: {\r\n  roadColor: 0x080808,\r\n  islandColor: 0x0a0a0a,\r\n  background: 0x000000,\r\n  shoulderLines: 0xFFFFFF,\r\n  brokenLines: 0xFFFFFF,\r\n  leftCars: [0xD856BF, 0x6750A2, 0xC247AC],\r\n  rightCars: [0x03B3C3, 0x0E5EA5, 0x324555],\r\n  sticks: 0x03B3C3,\r\n}\r\n} }) => {\r\nconst hyperspeed = useRef(null);\r\nuseEffect(() => {\r\n  const mountainUniforms = {\r\n    uFreq: { value: new THREE.Vector3(3, 6, 10) },\r\n    uAmp: { value: new THREE.Vector3(30, 30, 20) }\r\n  };\r\n\r\n  const xyUniforms = {\r\n    uFreq: { value: new THREE.Vector2(5, 2) },\r\n    uAmp: { value: new THREE.Vector2(25, 15) }\r\n  };\r\n\r\n  const LongRaceUniforms = {\r\n    uFreq: { value: new THREE.Vector2(2, 3) },\r\n    uAmp: { value: new THREE.Vector2(35, 10) }\r\n  };\r\n\r\n  const turbulentUniforms = {\r\n    uFreq: { value: new THREE.Vector4(4, 8, 8, 1) },\r\n    uAmp: { value: new THREE.Vector4(25, 5, 10, 10) }\r\n  };\r\n\r\n  const deepUniforms = {\r\n    uFreq: { value: new THREE.Vector2(4, 8) },\r\n    uAmp: { value: new THREE.Vector2(10, 20) },\r\n    uPowY: { value: new THREE.Vector2(20, 2) }\r\n  };\r\n\r\n  let nsin = val => Math.sin(val) * 0.5 + 0.5;\r\n\r\n  const distortions = {\r\n    mountainDistortion: {\r\n      uniforms: mountainUniforms,\r\n      getDistortion: `\r\n        uniform vec3 uAmp;\r\n        uniform vec3 uFreq;\r\n        #define PI 3.14159265358979\r\n        float nsin(float val){\r\n          return sin(val) * 0.5 + 0.5;\r\n        }\r\n        vec3 getDistortion(float progress){\r\n          float movementProgressFix = 0.02;\r\n          return vec3( \r\n            cos(progress * PI * uFreq.x + uTime) * uAmp.x - cos(movementProgressFix * PI * uFreq.x + uTime) * uAmp.x,\r\n            nsin(progress * PI * uFreq.y + uTime) * uAmp.y - nsin(movementProgressFix * PI * uFreq.y + uTime) * uAmp.y,\r\n            nsin(progress * PI * uFreq.z + uTime) * uAmp.z - nsin(movementProgressFix * PI * uFreq.z + uTime) * uAmp.z\r\n          );\r\n        }\r\n      `,\r\n      getJS: (progress, time) => {\r\n        let movementProgressFix = 0.02;\r\n        let uFreq = mountainUniforms.uFreq.value;\r\n        let uAmp = mountainUniforms.uAmp.value;\r\n        let distortion = new THREE.Vector3(\r\n          Math.cos(progress * Math.PI * uFreq.x + time) * uAmp.x -\r\n          Math.cos(movementProgressFix * Math.PI * uFreq.x + time) * uAmp.x,\r\n          nsin(progress * Math.PI * uFreq.y + time) * uAmp.y -\r\n          nsin(movementProgressFix * Math.PI * uFreq.y + time) * uAmp.y,\r\n          nsin(progress * Math.PI * uFreq.z + time) * uAmp.z -\r\n          nsin(movementProgressFix * Math.PI * uFreq.z + time) * uAmp.z\r\n        );\r\n        let lookAtAmp = new THREE.Vector3(2, 2, 2);\r\n        let lookAtOffset = new THREE.Vector3(0, 0, -5);\r\n        return distortion.multiply(lookAtAmp).add(lookAtOffset);\r\n      }\r\n    },\r\n    xyDistortion: {\r\n      uniforms: xyUniforms,\r\n      getDistortion: `\r\n        uniform vec2 uFreq;\r\n        uniform vec2 uAmp;\r\n        #define PI 3.14159265358979\r\n        vec3 getDistortion(float progress){\r\n          float movementProgressFix = 0.02;\r\n          return vec3( \r\n            cos(progress * PI * uFreq.x + uTime) * uAmp.x - cos(movementProgressFix * PI * uFreq.x + uTime) * uAmp.x,\r\n            sin(progress * PI * uFreq.y + PI/2. + uTime) * uAmp.y - sin(movementProgressFix * PI * uFreq.y + PI/2. + uTime) * uAmp.y,\r\n            0.\r\n          );\r\n        }\r\n      `,\r\n      getJS: (progress, time) => {\r\n        let movementProgressFix = 0.02;\r\n        let uFreq = xyUniforms.uFreq.value;\r\n        let uAmp = xyUniforms.uAmp.value;\r\n        let distortion = new THREE.Vector3(\r\n          Math.cos(progress * Math.PI * uFreq.x + time) * uAmp.x -\r\n          Math.cos(movementProgressFix * Math.PI * uFreq.x + time) * uAmp.x,\r\n          Math.sin(progress * Math.PI * uFreq.y + time + Math.PI / 2) * uAmp.y -\r\n          Math.sin(movementProgressFix * Math.PI * uFreq.y + time + Math.PI / 2) * uAmp.y,\r\n          0\r\n        );\r\n        let lookAtAmp = new THREE.Vector3(2, 0.4, 1);\r\n        let lookAtOffset = new THREE.Vector3(0, 0, -3);\r\n        return distortion.multiply(lookAtAmp).add(lookAtOffset);\r\n      }\r\n    },\r\n    LongRaceDistortion: {\r\n      uniforms: LongRaceUniforms,\r\n      getDistortion: `\r\n        uniform vec2 uFreq;\r\n        uniform vec2 uAmp;\r\n        #define PI 3.14159265358979\r\n        vec3 getDistortion(float progress){\r\n          float camProgress = 0.0125;\r\n          return vec3( \r\n            sin(progress * PI * uFreq.x + uTime) * uAmp.x - sin(camProgress * PI * uFreq.x + uTime) * uAmp.x,\r\n            sin(progress * PI * uFreq.y + uTime) * uAmp.y - sin(camProgress * PI * uFreq.y + uTime) * uAmp.y,\r\n            0.\r\n          );\r\n        }\r\n      `,\r\n      getJS: (progress, time) => {\r\n        let camProgress = 0.0125;\r\n        let uFreq = LongRaceUniforms.uFreq.value;\r\n        let uAmp = LongRaceUniforms.uAmp.value;\r\n        let distortion = new THREE.Vector3(\r\n          Math.sin(progress * Math.PI * uFreq.x + time) * uAmp.x -\r\n          Math.sin(camProgress * Math.PI * uFreq.x + time) * uAmp.x,\r\n          Math.sin(progress * Math.PI * uFreq.y + time) * uAmp.y -\r\n          Math.sin(camProgress * Math.PI * uFreq.y + time) * uAmp.y,\r\n          0\r\n        );\r\n        let lookAtAmp = new THREE.Vector3(1, 1, 0);\r\n        let lookAtOffset = new THREE.Vector3(0, 0, -5);\r\n        return distortion.multiply(lookAtAmp).add(lookAtOffset);\r\n      }\r\n    },\r\n    turbulentDistortion: {\r\n      uniforms: turbulentUniforms,\r\n      getDistortion: `\r\n        uniform vec4 uFreq;\r\n        uniform vec4 uAmp;\r\n        float nsin(float val){\r\n          return sin(val) * 0.5 + 0.5;\r\n        }\r\n        #define PI 3.14159265358979\r\n        float getDistortionX(float progress){\r\n          return (\r\n            cos(PI * progress * uFreq.r + uTime) * uAmp.r +\r\n            pow(cos(PI * progress * uFreq.g + uTime * (uFreq.g / uFreq.r)), 2. ) * uAmp.g\r\n          );\r\n        }\r\n        float getDistortionY(float progress){\r\n          return (\r\n            -nsin(PI * progress * uFreq.b + uTime) * uAmp.b +\r\n            -pow(nsin(PI * progress * uFreq.a + uTime / (uFreq.b / uFreq.a)), 5.) * uAmp.a\r\n          );\r\n        }\r\n        vec3 getDistortion(float progress){\r\n          return vec3(\r\n            getDistortionX(progress) - getDistortionX(0.0125),\r\n            getDistortionY(progress) - getDistortionY(0.0125),\r\n            0.\r\n          );\r\n        }\r\n      `,\r\n      getJS: (progress, time) => {\r\n        const uFreq = turbulentUniforms.uFreq.value;\r\n        const uAmp = turbulentUniforms.uAmp.value;\r\n\r\n        const getX = p =>\r\n          Math.cos(Math.PI * p * uFreq.x + time) * uAmp.x +\r\n          Math.pow(Math.cos(Math.PI * p * uFreq.y + time * (uFreq.y / uFreq.x)), 2) * uAmp.y;\r\n\r\n        const getY = p =>\r\n          -nsin(Math.PI * p * uFreq.z + time) * uAmp.z -\r\n          Math.pow(nsin(Math.PI * p * uFreq.w + time / (uFreq.z / uFreq.w)), 5) * uAmp.w;\r\n\r\n        let distortion = new THREE.Vector3(\r\n          getX(progress) - getX(progress + 0.007),\r\n          getY(progress) - getY(progress + 0.007),\r\n          0\r\n        );\r\n        let lookAtAmp = new THREE.Vector3(-2, -5, 0);\r\n        let lookAtOffset = new THREE.Vector3(0, 0, -10);\r\n        return distortion.multiply(lookAtAmp).add(lookAtOffset);\r\n      }\r\n    },\r\n    turbulentDistortionStill: {\r\n      uniforms: turbulentUniforms,\r\n      getDistortion: `\r\n        uniform vec4 uFreq;\r\n        uniform vec4 uAmp;\r\n        float nsin(float val){\r\n          return sin(val) * 0.5 + 0.5;\r\n        }\r\n        #define PI 3.14159265358979\r\n        float getDistortionX(float progress){\r\n          return (\r\n            cos(PI * progress * uFreq.r) * uAmp.r +\r\n            pow(cos(PI * progress * uFreq.g * (uFreq.g / uFreq.r)), 2. ) * uAmp.g\r\n          );\r\n        }\r\n        float getDistortionY(float progress){\r\n          return (\r\n            -nsin(PI * progress * uFreq.b) * uAmp.b +\r\n            -pow(nsin(PI * progress * uFreq.a / (uFreq.b / uFreq.a)), 5.) * uAmp.a\r\n          );\r\n        }\r\n        vec3 getDistortion(float progress){\r\n          return vec3(\r\n            getDistortionX(progress) - getDistortionX(0.02),\r\n            getDistortionY(progress) - getDistortionY(0.02),\r\n            0.\r\n          );\r\n        }\r\n      `\r\n    },\r\n    deepDistortionStill: {\r\n      uniforms: deepUniforms,\r\n      getDistortion: `\r\n        uniform vec4 uFreq;\r\n        uniform vec4 uAmp;\r\n        uniform vec2 uPowY;\r\n        float nsin(float val){\r\n          return sin(val) * 0.5 + 0.5;\r\n        }\r\n        #define PI 3.14159265358979\r\n        float getDistortionX(float progress){\r\n          return (\r\n            sin(progress * PI * uFreq.x) * uAmp.x * 2.\r\n          );\r\n        }\r\n        float getDistortionY(float progress){\r\n          return (\r\n            pow(abs(progress * uPowY.x), uPowY.y) + sin(progress * PI * uFreq.y) * uAmp.y\r\n          );\r\n        }\r\n        vec3 getDistortion(float progress){\r\n          return vec3(\r\n            getDistortionX(progress) - getDistortionX(0.02),\r\n            getDistortionY(progress) - getDistortionY(0.05),\r\n            0.\r\n          );\r\n        }\r\n      `\r\n    },\r\n    deepDistortion: {\r\n      uniforms: deepUniforms,\r\n      getDistortion: `\r\n        uniform vec4 uFreq;\r\n        uniform vec4 uAmp;\r\n        uniform vec2 uPowY;\r\n        float nsin(float val){\r\n          return sin(val) * 0.5 + 0.5;\r\n        }\r\n        #define PI 3.14159265358979\r\n        float getDistortionX(float progress){\r\n          return (\r\n            sin(progress * PI * uFreq.x + uTime) * uAmp.x\r\n          );\r\n        }\r\n        float getDistortionY(float progress){\r\n          return (\r\n            pow(abs(progress * uPowY.x), uPowY.y) + sin(progress * PI * uFreq.y + uTime) * uAmp.y\r\n          );\r\n        }\r\n        vec3 getDistortion(float progress){\r\n          return vec3(\r\n            getDistortionX(progress) - getDistortionX(0.02),\r\n            getDistortionY(progress) - getDistortionY(0.02),\r\n            0.\r\n          );\r\n        }\r\n      `,\r\n      getJS: (progress, time) => {\r\n        const uFreq = deepUniforms.uFreq.value;\r\n        const uAmp = deepUniforms.uAmp.value;\r\n        const uPowY = deepUniforms.uPowY.value;\r\n\r\n        const getX = p => Math.sin(p * Math.PI * uFreq.x + time) * uAmp.x;\r\n        const getY = p =>\r\n          Math.pow(p * uPowY.x, uPowY.y) +\r\n          Math.sin(p * Math.PI * uFreq.y + time) * uAmp.y;\r\n\r\n        let distortion = new THREE.Vector3(\r\n          getX(progress) - getX(progress + 0.01),\r\n          getY(progress) - getY(progress + 0.01),\r\n          0\r\n        );\r\n        let lookAtAmp = new THREE.Vector3(-2, -4, 0);\r\n        let lookAtOffset = new THREE.Vector3(0, 0, -10);\r\n        return distortion.multiply(lookAtAmp).add(lookAtOffset);\r\n      }\r\n    }\r\n  }\r\n\r\n  class App {\r\n    constructor(container, options = {}) {\r\n      this.options = options;\r\n      if (this.options.distortion == null) {\r\n        this.options.distortion = {\r\n          uniforms: distortion_uniforms,\r\n          getDistortion: distortion_vertex\r\n        };\r\n      }\r\n      this.container = container;\r\n      this.renderer = new THREE.WebGLRenderer({\r\n        antialias: false,\r\n        alpha: true\r\n      });\r\n      this.renderer.setSize(container.offsetWidth, container.offsetHeight, false);\r\n      this.renderer.setPixelRatio(window.devicePixelRatio);\r\n      this.composer = new EffectComposer(this.renderer);\r\n      container.append(this.renderer.domElement);\r\n\r\n      this.camera = new THREE.PerspectiveCamera(\r\n        options.fov,\r\n        container.offsetWidth / container.offsetHeight,\r\n        0.1,\r\n        10000\r\n      );\r\n      this.camera.position.z = -5;\r\n      this.camera.position.y = 8;\r\n      this.camera.position.x = 0;\r\n      this.scene = new THREE.Scene();\r\n      this.scene.background = null;\r\n\r\n      let fog = new THREE.Fog(\r\n        options.colors.background,\r\n        options.length * 0.2,\r\n        options.length * 500\r\n      );\r\n      this.scene.fog = fog;\r\n      this.fogUniforms = {\r\n        fogColor: { value: fog.color },\r\n        fogNear: { value: fog.near },\r\n        fogFar: { value: fog.far }\r\n      };\r\n      this.clock = new THREE.Clock();\r\n      this.assets = {};\r\n      this.disposed = false;\r\n\r\n      this.road = new Road(this, options);\r\n      this.leftCarLights = new CarLights(\r\n        this,\r\n        options,\r\n        options.colors.leftCars,\r\n        options.movingAwaySpeed,\r\n        new THREE.Vector2(0, 1 - options.carLightsFade)\r\n      );\r\n      this.rightCarLights = new CarLights(\r\n        this,\r\n        options,\r\n        options.colors.rightCars,\r\n        options.movingCloserSpeed,\r\n        new THREE.Vector2(1, 0 + options.carLightsFade)\r\n      );\r\n      this.leftSticks = new LightsSticks(this, options);\r\n\r\n      this.fovTarget = options.fov;\r\n      this.speedUpTarget = 0;\r\n      this.speedUp = 0;\r\n      this.timeOffset = 0;\r\n\r\n      this.tick = this.tick.bind(this);\r\n      this.init = this.init.bind(this);\r\n      this.setSize = this.setSize.bind(this);\r\n      this.onMouseDown = this.onMouseDown.bind(this);\r\n      this.onMouseUp = this.onMouseUp.bind(this);\r\n    }\r\n\r\n    initPasses() {\r\n      this.renderPass = new RenderPass(this.scene, this.camera);\r\n      this.bloomPass = new EffectPass(\r\n        this.camera,\r\n        new BloomEffect({\r\n          luminanceThreshold: 0.2,\r\n          luminanceSmoothing: 0,\r\n          resolutionScale: 1\r\n        })\r\n      );\r\n\r\n      const smaaPass = new EffectPass(\r\n        this.camera,\r\n        new SMAAEffect({\r\n          preset: SMAAPreset.MEDIUM,\r\n          searchImage: SMAAEffect.searchImageDataURL,\r\n          areaImage: SMAAEffect.areaImageDataURL\r\n        })\r\n      );\r\n      this.renderPass.renderToScreen = false;\r\n      this.bloomPass.renderToScreen = false;\r\n      smaaPass.renderToScreen = true;\r\n      this.composer.addPass(this.renderPass);\r\n      this.composer.addPass(this.bloomPass);\r\n      this.composer.addPass(smaaPass);\r\n    }\r\n\r\n    loadAssets() {\r\n      const assets = this.assets;\r\n      return new Promise((resolve) => {\r\n        const manager = new THREE.LoadingManager(resolve);\r\n\r\n        const searchImage = new Image();\r\n        const areaImage = new Image();\r\n        assets.smaa = {};\r\n        searchImage.addEventListener(\"load\", function () {\r\n          assets.smaa.search = this;\r\n          manager.itemEnd(\"smaa-search\");\r\n        });\r\n\r\n        areaImage.addEventListener(\"load\", function () {\r\n          assets.smaa.area = this;\r\n          manager.itemEnd(\"smaa-area\");\r\n        });\r\n        manager.itemStart(\"smaa-search\");\r\n        manager.itemStart(\"smaa-area\");\r\n\r\n        searchImage.src = SMAAEffect.searchImageDataURL;\r\n        areaImage.src = SMAAEffect.areaImageDataURL;\r\n      });\r\n    }\r\n\r\n    init() {\r\n      this.initPasses();\r\n      const options = this.options;\r\n      this.road.init();\r\n      this.leftCarLights.init();\r\n\r\n      this.leftCarLights.mesh.position.setX(\r\n        -options.roadWidth / 2 - options.islandWidth / 2\r\n      );\r\n      this.rightCarLights.init();\r\n      this.rightCarLights.mesh.position.setX(\r\n        options.roadWidth / 2 + options.islandWidth / 2\r\n      );\r\n      this.leftSticks.init();\r\n      this.leftSticks.mesh.position.setX(\r\n        -(options.roadWidth + options.islandWidth / 2)\r\n      );\r\n\r\n      this.container.addEventListener(\"mousedown\", this.onMouseDown);\r\n      this.container.addEventListener(\"mouseup\", this.onMouseUp);\r\n      this.container.addEventListener(\"mouseout\", this.onMouseUp);\r\n\r\n      this.tick();\r\n    }\r\n\r\n    onMouseDown(ev) {\r\n      if (this.options.onSpeedUp) this.options.onSpeedUp(ev);\r\n      this.fovTarget = this.options.fovSpeedUp;\r\n      this.speedUpTarget = this.options.speedUp;\r\n    }\r\n\r\n    onMouseUp(ev) {\r\n      if (this.options.onSlowDown) this.options.onSlowDown(ev);\r\n      this.fovTarget = this.options.fov;\r\n      this.speedUpTarget = 0;\r\n    }\r\n\r\n    update(delta) {\r\n      let lerpPercentage = Math.exp(-(-60 * Math.log2(1 - 0.1)) * delta);\r\n      this.speedUp += lerp(\r\n        this.speedUp,\r\n        this.speedUpTarget,\r\n        lerpPercentage,\r\n        0.00001\r\n      );\r\n      this.timeOffset += this.speedUp * delta;\r\n\r\n      let time = this.clock.elapsedTime + this.timeOffset;\r\n\r\n      this.rightCarLights.update(time);\r\n      this.leftCarLights.update(time);\r\n      this.leftSticks.update(time);\r\n      this.road.update(time);\r\n\r\n      let updateCamera = false;\r\n      let fovChange = lerp(this.camera.fov, this.fovTarget, lerpPercentage);\r\n      if (fovChange !== 0) {\r\n        this.camera.fov += fovChange * delta * 6;\r\n        updateCamera = true;\r\n      }\r\n\r\n      if (this.options.distortion.getJS) {\r\n        const distortion = this.options.distortion.getJS(0.025, time);\r\n\r\n        this.camera.lookAt(\r\n          new THREE.Vector3(\r\n            this.camera.position.x + distortion.x,\r\n            this.camera.position.y + distortion.y,\r\n            this.camera.position.z + distortion.z\r\n          )\r\n        );\r\n        updateCamera = true;\r\n      }\r\n      if (updateCamera) {\r\n        this.camera.updateProjectionMatrix();\r\n      }\r\n\r\n      if (this.options.isHyper) {\r\n        console.log(this.options.isHyper);\r\n      }\r\n    }\r\n\r\n    render(delta) {\r\n      this.composer.render(delta);\r\n    }\r\n\r\n    dispose() {\r\n      this.disposed = true;\r\n    }\r\n\r\n    setSize(width, height, updateStyles) {\r\n      this.composer.setSize(width, height, updateStyles);\r\n    }\r\n\r\n    tick() {\r\n      if (this.disposed || !this) return;\r\n      if (resizeRendererToDisplaySize(this.renderer, this.setSize)) {\r\n        const canvas = this.renderer.domElement;\r\n        this.camera.aspect = canvas.clientWidth / canvas.clientHeight;\r\n        this.camera.updateProjectionMatrix();\r\n      }\r\n      const delta = this.clock.getDelta();\r\n      this.render(delta);\r\n      this.update(delta);\r\n      requestAnimationFrame(this.tick);\r\n    }\r\n  }\r\n\r\n  const distortion_uniforms = {\r\n    uDistortionX: { value: new THREE.Vector2(80, 3) },\r\n    uDistortionY: { value: new THREE.Vector2(-40, 2.5) }\r\n  };\r\n\r\n  const distortion_vertex = `\r\n    #define PI 3.14159265358979\r\n    uniform vec2 uDistortionX;\r\n    uniform vec2 uDistortionY;\r\n    float nsin(float val){\r\n      return sin(val) * 0.5 + 0.5;\r\n    }\r\n    vec3 getDistortion(float progress){\r\n      progress = clamp(progress, 0., 1.);\r\n      float xAmp = uDistortionX.r;\r\n      float xFreq = uDistortionX.g;\r\n      float yAmp = uDistortionY.r;\r\n      float yFreq = uDistortionY.g;\r\n      return vec3( \r\n        xAmp * nsin(progress * PI * xFreq - PI / 2.),\r\n        yAmp * nsin(progress * PI * yFreq - PI / 2.),\r\n        0.\r\n      );\r\n    }\r\n  `;\r\n\r\n  const random = base => {\r\n    if (Array.isArray(base)) return Math.random() * (base[1] - base[0]) + base[0];\r\n    return Math.random() * base;\r\n  };\r\n\r\n  const pickRandom = arr => {\r\n    if (Array.isArray(arr)) return arr[Math.floor(Math.random() * arr.length)];\r\n    return arr;\r\n  };\r\n\r\n  function lerp(current, target, speed = 0.1, limit = 0.001) {\r\n    let change = (target - current) * speed;\r\n    if (Math.abs(change) < limit) {\r\n      change = target - current;\r\n    }\r\n    return change;\r\n  }\r\n\r\n  class CarLights {\r\n    constructor(webgl, options, colors, speed, fade) {\r\n      this.webgl = webgl;\r\n      this.options = options;\r\n      this.colors = colors;\r\n      this.speed = speed;\r\n      this.fade = fade;\r\n    }\r\n\r\n    init() {\r\n      const options = this.options;\r\n      let curve = new THREE.LineCurve3(\r\n        new THREE.Vector3(0, 0, 0),\r\n        new THREE.Vector3(0, 0, -1)\r\n      );\r\n      let geometry = new THREE.TubeGeometry(curve, 40, 1, 8, false);\r\n\r\n      let instanced = new THREE.InstancedBufferGeometry().copy(geometry);\r\n      instanced.instanceCount = options.lightPairsPerRoadWay * 2;\r\n\r\n      let laneWidth = options.roadWidth / options.lanesPerRoad;\r\n\r\n      let aOffset = [];\r\n      let aMetrics = [];\r\n      let aColor = [];\r\n\r\n      let colors = this.colors;\r\n      if (Array.isArray(colors)) {\r\n        colors = colors.map(c => new THREE.Color(c));\r\n      } else {\r\n        colors = new THREE.Color(colors);\r\n      }\r\n\r\n      for (let i = 0; i < options.lightPairsPerRoadWay; i++) {\r\n        let radius = random(options.carLightsRadius);\r\n        let length = random(options.carLightsLength);\r\n        let speed = random(this.speed);\r\n\r\n        let carLane = i % options.lanesPerRoad;\r\n        let laneX = carLane * laneWidth - options.roadWidth / 2 + laneWidth / 2;\r\n\r\n        let carWidth = random(options.carWidthPercentage) * laneWidth;\r\n        let carShiftX = random(options.carShiftX) * laneWidth;\r\n        laneX += carShiftX;\r\n\r\n        let offsetY = random(options.carFloorSeparation) + radius * 1.3;\r\n\r\n        let offsetZ = -random(options.length);\r\n\r\n        aOffset.push(laneX - carWidth / 2);\r\n        aOffset.push(offsetY);\r\n        aOffset.push(offsetZ);\r\n\r\n        aOffset.push(laneX + carWidth / 2);\r\n        aOffset.push(offsetY);\r\n        aOffset.push(offsetZ);\r\n\r\n        aMetrics.push(radius);\r\n        aMetrics.push(length);\r\n        aMetrics.push(speed);\r\n\r\n        aMetrics.push(radius);\r\n        aMetrics.push(length);\r\n        aMetrics.push(speed);\r\n\r\n        let color = pickRandom(colors);\r\n        aColor.push(color.r);\r\n        aColor.push(color.g);\r\n        aColor.push(color.b);\r\n\r\n        aColor.push(color.r);\r\n        aColor.push(color.g);\r\n        aColor.push(color.b);\r\n      }\r\n\r\n      instanced.setAttribute(\r\n        \"aOffset\",\r\n        new THREE.InstancedBufferAttribute(new Float32Array(aOffset), 3, false)\r\n      );\r\n      instanced.setAttribute(\r\n        \"aMetrics\",\r\n        new THREE.InstancedBufferAttribute(new Float32Array(aMetrics), 3, false)\r\n      );\r\n      instanced.setAttribute(\r\n        \"aColor\",\r\n        new THREE.InstancedBufferAttribute(new Float32Array(aColor), 3, false)\r\n      );\r\n\r\n      let material = new THREE.ShaderMaterial({\r\n        fragmentShader: carLightsFragment,\r\n        vertexShader: carLightsVertex,\r\n        transparent: true,\r\n        uniforms: Object.assign(\r\n          {\r\n            uTime: { value: 0 },\r\n            uTravelLength: { value: options.length },\r\n            uFade: { value: this.fade }\r\n          },\r\n          this.webgl.fogUniforms,\r\n          options.distortion.uniforms\r\n        )\r\n      });\r\n\r\n      material.onBeforeCompile = shader => {\r\n        shader.vertexShader = shader.vertexShader.replace(\r\n          \"#include <getDistortion_vertex>\",\r\n          options.distortion.getDistortion\r\n        );\r\n      };\r\n\r\n      let mesh = new THREE.Mesh(instanced, material);\r\n      mesh.frustumCulled = false;\r\n      this.webgl.scene.add(mesh);\r\n      this.mesh = mesh;\r\n    }\r\n\r\n    update(time) {\r\n      this.mesh.material.uniforms.uTime.value = time;\r\n    }\r\n  }\r\n\r\n  const carLightsFragment = `\r\n    #define USE_FOG;\r\n    ${THREE.ShaderChunk[\"fog_pars_fragment\"]}\r\n    varying vec3 vColor;\r\n    varying vec2 vUv; \r\n    uniform vec2 uFade;\r\n    void main() {\r\n      vec3 color = vec3(vColor);\r\n      float alpha = smoothstep(uFade.x, uFade.y, vUv.x);\r\n      gl_FragColor = vec4(color, alpha);\r\n      if (gl_FragColor.a < 0.0001) discard;\r\n      ${THREE.ShaderChunk[\"fog_fragment\"]}\r\n    }\r\n  `;\r\n\r\n  const carLightsVertex = `\r\n    #define USE_FOG;\r\n    ${THREE.ShaderChunk[\"fog_pars_vertex\"]}\r\n    attribute vec3 aOffset;\r\n    attribute vec3 aMetrics;\r\n    attribute vec3 aColor;\r\n    uniform float uTravelLength;\r\n    uniform float uTime;\r\n    varying vec2 vUv; \r\n    varying vec3 vColor; \r\n    #include <getDistortion_vertex>\r\n    void main() {\r\n      vec3 transformed = position.xyz;\r\n      float radius = aMetrics.r;\r\n      float myLength = aMetrics.g;\r\n      float speed = aMetrics.b;\r\n\r\n      transformed.xy *= radius;\r\n      transformed.z *= myLength;\r\n\r\n      transformed.z += myLength - mod(uTime * speed + aOffset.z, uTravelLength);\r\n      transformed.xy += aOffset.xy;\r\n\r\n      float progress = abs(transformed.z / uTravelLength);\r\n      transformed.xyz += getDistortion(progress);\r\n\r\n      vec4 mvPosition = modelViewMatrix * vec4(transformed, 1.);\r\n      gl_Position = projectionMatrix * mvPosition;\r\n      vUv = uv;\r\n      vColor = aColor;\r\n      ${THREE.ShaderChunk[\"fog_vertex\"]}\r\n    }\r\n  `;\r\n\r\n  class LightsSticks {\r\n    constructor(webgl, options) {\r\n      this.webgl = webgl;\r\n      this.options = options;\r\n    }\r\n\r\n    init() {\r\n      const options = this.options;\r\n      const geometry = new THREE.PlaneGeometry(1, 1);\r\n      let instanced = new THREE.InstancedBufferGeometry().copy(geometry);\r\n      let totalSticks = options.totalSideLightSticks;\r\n      instanced.instanceCount = totalSticks;\r\n\r\n      let stickoffset = options.length / (totalSticks - 1);\r\n      const aOffset = [];\r\n      const aColor = [];\r\n      const aMetrics = [];\r\n\r\n      let colors = options.colors.sticks;\r\n      if (Array.isArray(colors)) {\r\n        colors = colors.map(c => new THREE.Color(c));\r\n      } else {\r\n        colors = new THREE.Color(colors);\r\n      }\r\n\r\n      for (let i = 0; i < totalSticks; i++) {\r\n        let width = random(options.lightStickWidth);\r\n        let height = random(options.lightStickHeight);\r\n        aOffset.push((i - 1) * stickoffset * 2 + stickoffset * Math.random());\r\n\r\n        let color = pickRandom(colors);\r\n        aColor.push(color.r);\r\n        aColor.push(color.g);\r\n        aColor.push(color.b);\r\n\r\n        aMetrics.push(width);\r\n        aMetrics.push(height);\r\n      }\r\n\r\n      instanced.setAttribute(\r\n        \"aOffset\",\r\n        new THREE.InstancedBufferAttribute(new Float32Array(aOffset), 1, false)\r\n      );\r\n      instanced.setAttribute(\r\n        \"aColor\",\r\n        new THREE.InstancedBufferAttribute(new Float32Array(aColor), 3, false)\r\n      );\r\n      instanced.setAttribute(\r\n        \"aMetrics\",\r\n        new THREE.InstancedBufferAttribute(new Float32Array(aMetrics), 2, false)\r\n      );\r\n\r\n      const material = new THREE.ShaderMaterial({\r\n        fragmentShader: sideSticksFragment,\r\n        vertexShader: sideSticksVertex,\r\n        side: THREE.DoubleSide,\r\n        uniforms: Object.assign(\r\n          {\r\n            uTravelLength: { value: options.length },\r\n            uTime: { value: 0 }\r\n          },\r\n          this.webgl.fogUniforms,\r\n          options.distortion.uniforms\r\n        )\r\n      });\r\n\r\n      material.onBeforeCompile = shader => {\r\n        shader.vertexShader = shader.vertexShader.replace(\r\n          \"#include <getDistortion_vertex>\",\r\n          options.distortion.getDistortion\r\n        );\r\n      };\r\n\r\n      const mesh = new THREE.Mesh(instanced, material);\r\n      mesh.frustumCulled = false;\r\n      this.webgl.scene.add(mesh);\r\n      this.mesh = mesh;\r\n    }\r\n\r\n    update(time) {\r\n      this.mesh.material.uniforms.uTime.value = time;\r\n    }\r\n  }\r\n\r\n  const sideSticksVertex = `\r\n    #define USE_FOG;\r\n    ${THREE.ShaderChunk[\"fog_pars_vertex\"]}\r\n    attribute float aOffset;\r\n    attribute vec3 aColor;\r\n    attribute vec2 aMetrics;\r\n    uniform float uTravelLength;\r\n    uniform float uTime;\r\n    varying vec3 vColor;\r\n    mat4 rotationY( in float angle ) {\r\n      return mat4(\tcos(angle),\t\t0,\t\tsin(angle),\t0,\r\n                   0,\t\t1.0,\t\t\t 0,\t0,\r\n              -sin(angle),\t0,\t\tcos(angle),\t0,\r\n              0, \t\t0,\t\t\t\t0,\t1);\r\n    }\r\n    #include <getDistortion_vertex>\r\n    void main(){\r\n      vec3 transformed = position.xyz;\r\n      float width = aMetrics.x;\r\n      float height = aMetrics.y;\r\n\r\n      transformed.xy *= vec2(width, height);\r\n      float time = mod(uTime * 60. * 2. + aOffset, uTravelLength);\r\n\r\n      transformed = (rotationY(3.14/2.) * vec4(transformed,1.)).xyz;\r\n\r\n      transformed.z += - uTravelLength + time;\r\n\r\n      float progress = abs(transformed.z / uTravelLength);\r\n      transformed.xyz += getDistortion(progress);\r\n\r\n      transformed.y += height / 2.;\r\n      transformed.x += -width / 2.;\r\n      vec4 mvPosition = modelViewMatrix * vec4(transformed, 1.);\r\n      gl_Position = projectionMatrix * mvPosition;\r\n      vColor = aColor;\r\n      ${THREE.ShaderChunk[\"fog_vertex\"]}\r\n    }\r\n  `;\r\n\r\n  const sideSticksFragment = `\r\n    #define USE_FOG;\r\n    ${THREE.ShaderChunk[\"fog_pars_fragment\"]}\r\n    varying vec3 vColor;\r\n    void main(){\r\n      vec3 color = vec3(vColor);\r\n      gl_FragColor = vec4(color,1.);\r\n      ${THREE.ShaderChunk[\"fog_fragment\"]}\r\n    }\r\n  `;\r\n\r\n  class Road {\r\n    constructor(webgl, options) {\r\n      this.webgl = webgl;\r\n      this.options = options;\r\n      this.uTime = { value: 0 };\r\n    }\r\n\r\n    createPlane(side, width, isRoad) {\r\n      const options = this.options;\r\n      let segments = 100;\r\n      const geometry = new THREE.PlaneGeometry(\r\n        isRoad ? options.roadWidth : options.islandWidth,\r\n        options.length,\r\n        20,\r\n        segments\r\n      );\r\n      let uniforms = {\r\n        uTravelLength: { value: options.length },\r\n        uColor: { value: new THREE.Color(isRoad ? options.colors.roadColor : options.colors.islandColor) },\r\n        uTime: this.uTime\r\n      };\r\n\r\n      if (isRoad) {\r\n        uniforms = Object.assign(uniforms, {\r\n          uLanes: { value: options.lanesPerRoad },\r\n          uBrokenLinesColor: { value: new THREE.Color(options.colors.brokenLines) },\r\n          uShoulderLinesColor: { value: new THREE.Color(options.colors.shoulderLines) },\r\n          uShoulderLinesWidthPercentage: { value: options.shoulderLinesWidthPercentage },\r\n          uBrokenLinesLengthPercentage: { value: options.brokenLinesLengthPercentage },\r\n          uBrokenLinesWidthPercentage: { value: options.brokenLinesWidthPercentage }\r\n        });\r\n      }\r\n\r\n      const material = new THREE.ShaderMaterial({\r\n        fragmentShader: isRoad ? roadFragment : islandFragment,\r\n        vertexShader: roadVertex,\r\n        side: THREE.DoubleSide,\r\n        uniforms: Object.assign(\r\n          uniforms,\r\n          this.webgl.fogUniforms,\r\n          options.distortion.uniforms\r\n        )\r\n      });\r\n\r\n      material.onBeforeCompile = shader => {\r\n        shader.vertexShader = shader.vertexShader.replace(\r\n          \"#include <getDistortion_vertex>\",\r\n          options.distortion.getDistortion\r\n        );\r\n      };\r\n\r\n      const mesh = new THREE.Mesh(geometry, material);\r\n      mesh.rotation.x = -Math.PI / 2;\r\n      mesh.position.z = -options.length / 2;\r\n      mesh.position.x +=\r\n        (this.options.islandWidth / 2 + options.roadWidth / 2) * side;\r\n      this.webgl.scene.add(mesh);\r\n\r\n      return mesh;\r\n    }\r\n\r\n    init() {\r\n      this.leftRoadWay = this.createPlane(-1, this.options.roadWidth, true);\r\n      this.rightRoadWay = this.createPlane(1, this.options.roadWidth, true);\r\n      this.island = this.createPlane(0, this.options.islandWidth, false);\r\n    }\r\n\r\n    update(time) {\r\n      this.uTime.value = time;\r\n    }\r\n  }\r\n\r\n  const roadBaseFragment = `\r\n    #define USE_FOG;\r\n    varying vec2 vUv; \r\n    uniform vec3 uColor;\r\n    uniform float uTime;\r\n    #include <roadMarkings_vars>\r\n    ${THREE.ShaderChunk[\"fog_pars_fragment\"]}\r\n    void main() {\r\n      vec2 uv = vUv;\r\n      vec3 color = vec3(uColor);\r\n      #include <roadMarkings_fragment>\r\n      gl_FragColor = vec4(color, 1.);\r\n      ${THREE.ShaderChunk[\"fog_fragment\"]}\r\n    }\r\n  `;\r\n\r\n  const islandFragment = roadBaseFragment\r\n    .replace(\"#include <roadMarkings_fragment>\", \"\")\r\n    .replace(\"#include <roadMarkings_vars>\", \"\");\r\n\r\n  const roadMarkings_vars = `\r\n    uniform float uLanes;\r\n    uniform vec3 uBrokenLinesColor;\r\n    uniform vec3 uShoulderLinesColor;\r\n    uniform float uShoulderLinesWidthPercentage;\r\n    uniform float uBrokenLinesWidthPercentage;\r\n    uniform float uBrokenLinesLengthPercentage;\r\n    highp float random(vec2 co) {\r\n      highp float a = 12.9898;\r\n      highp float b = 78.233;\r\n      highp float c = 43758.5453;\r\n      highp float dt = dot(co.xy, vec2(a, b));\r\n      highp float sn = mod(dt, 3.14);\r\n      return fract(sin(sn) * c);\r\n    }\r\n  `;\r\n\r\n  const roadMarkings_fragment = `\r\n    uv.y = mod(uv.y + uTime * 0.05, 1.);\r\n    float laneWidth = 1.0 / uLanes;\r\n    float brokenLineWidth = laneWidth * uBrokenLinesWidthPercentage;\r\n    float laneEmptySpace = 1. - uBrokenLinesLengthPercentage;\r\n\r\n    float brokenLines = step(1.0 - brokenLineWidth, fract(uv.x * 2.0)) * step(laneEmptySpace, fract(uv.y * 10.0));\r\n    float sideLines = step(1.0 - brokenLineWidth, fract((uv.x - laneWidth * (uLanes - 1.0)) * 2.0)) + step(brokenLineWidth, uv.x);\r\n\r\n    brokenLines = mix(brokenLines, sideLines, uv.x);\r\n  `;\r\n\r\n  const roadFragment = roadBaseFragment\r\n    .replace(\"#include <roadMarkings_fragment>\", roadMarkings_fragment)\r\n    .replace(\"#include <roadMarkings_vars>\", roadMarkings_vars);\r\n\r\n  const roadVertex = `\r\n    #define USE_FOG;\r\n    uniform float uTime;\r\n    ${THREE.ShaderChunk[\"fog_pars_vertex\"]}\r\n    uniform float uTravelLength;\r\n    varying vec2 vUv; \r\n    #include <getDistortion_vertex>\r\n    void main() {\r\n      vec3 transformed = position.xyz;\r\n      vec3 distortion = getDistortion((transformed.y + uTravelLength / 2.) / uTravelLength);\r\n      transformed.x += distortion.x;\r\n      transformed.z += distortion.y;\r\n      transformed.y += -1. * distortion.z;  \r\n      \r\n      vec4 mvPosition = modelViewMatrix * vec4(transformed, 1.);\r\n      gl_Position = projectionMatrix * mvPosition;\r\n      vUv = uv;\r\n      ${THREE.ShaderChunk[\"fog_vertex\"]}\r\n    }\r\n  `;\r\n\r\n  function resizeRendererToDisplaySize(renderer, setSize) {\r\n    const canvas = renderer.domElement;\r\n    const width = canvas.clientWidth;\r\n    const height = canvas.clientHeight;\r\n    const needResize = canvas.width !== width || canvas.height !== height;\r\n    if (needResize) {\r\n      setSize(width, height, false);\r\n    }\r\n    return needResize;\r\n  }\r\n\r\n  (function () {\r\n    const container = document.getElementById('lights');\r\n    effectOptions.distortion = distortions[effectOptions.distortion];\r\n\r\n    const myApp = new App(container, effectOptions);\r\n    myApp.loadAssets().then(myApp.init);\r\n  })();\r\n}, [effectOptions]);\r\n\r\nreturn (\r\n  <div id=\"lights\" ref={hyperspeed}></div>\r\n);\r\n}\r\n\r\nexport default Hyperspeed;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}