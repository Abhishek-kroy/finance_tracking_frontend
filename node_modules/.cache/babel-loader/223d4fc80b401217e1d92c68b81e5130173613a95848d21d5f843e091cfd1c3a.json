{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Abhishek Kumar Roy\\\\OneDrive\\\\Desktop\\\\finance_tracker\\\\finance_tracker\\\\src\\\\pages\\\\GenerateReport.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport Navbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\nimport BudgetReport from \"../components/BudgetReport\";\nimport html2pdf from \"html2pdf.js\"; // Import the html2pdf library\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GenerateReport = ({\n  mode,\n  setMode\n}) => {\n  _s();\n  const [budget, setBudgets] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [aiLoading, setAiLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [aiResponse, setAiResponse] = useState(\"\");\n  const navigate = useNavigate();\n\n  // Fetch budget data\n  useEffect(() => {\n    const fetchBudgets = async () => {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        setError(\"Unauthorized! Please log in again.\");\n        navigate(\"/login\");\n        return;\n      }\n      console.log(\"Fetching budgets...\");\n      try {\n        setLoading(true);\n        const response = await axios.get(\"http://localhost:4000/api/v1/getBudgetWithExpenses\", {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log(\"Budget data received:\", response.data.budgets); // Log the received data\n        setBudgets(response.data.budgets || []);\n      } catch (err) {\n        console.error(\"Error fetching budgets:\", err);\n        setError(\"Failed to fetch budget data. Please try again later.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchBudgets();\n  }, []);\n\n  // Fetch AI response based on budget data\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!budget.length || !Array.isArray(budget)) {\n        console.log(\"No valid budget data to process for AI response.\");\n        return;\n      }\n      let budgetDetail = \"\";\n      budget.forEach(b => {\n        budgetDetail += `Budget Name: ${b.name}\\n`;\n        budgetDetail += `Total Amount for Budget: ${b.amount}\\n`;\n        budgetDetail += `Spent Amount: ${b.spentAmount}\\n`;\n        budgetDetail += `Start Date: ${b.startDate}\\n`;\n        budgetDetail += `End Date: ${b.endDate}\\n`;\n        if (b.expenses && b.expenses.length > 0) {\n          budgetDetail += `  Expenses:\\n`;\n          b.expenses.forEach(e => {\n            budgetDetail += `    - Amount: ${e.amount}\\n`;\n            budgetDetail += `      Date: ${e.date}\\n`;\n            budgetDetail += `      Description: ${e.description || \"No description available\"}\\n`;\n          });\n        } else {\n          budgetDetail += `  No expenses recorded for this budget.\\n`;\n        }\n        budgetDetail += '\\n'; // Separate budgets with a blank line\n      });\n      const promptData = {\n        prompt: \"Generate a detailed, styled budget report using Tailwind CSS, formatted for web rendering. The report should contain a series of individual sections for each budget, each in its own div with appropriate spacing from other sections. For each budget, include the following details:\\n\\n1. **Budget Overview**:\\n   - Total Amount: Display the total allocated amount for the budget.\\n   - Spent Amount: Show the total amount spent from the budget.\\n   - Remaining: Display the remaining balance. If overspent, display 'Overspent' with the negative amount in red.\\n   - Start Date: Display the starting date of the budget period.\\n   - End Date: Display the end date of the budget period.\\n\\n2. **Expense Details**:\\n   - List each recorded expense in an unordered list.\\n   - Each expense should include:\\n     - Amount: The cost of the expense.\\n     - Date: The date when the expense occurred.\\n     - Description: Provide a brief description if available, or state 'No description available.'\\n\\n3. **Suggestions**:\\n   - Offer 2-3 actionable suggestions for improving budget management based on the observed spending behavior (e.g., ways to reduce overspending, organize spending, etc.).\\n\\n4. **Styling Guidelines**:\\n   - Use Tailwind CSS classes to ensure the report is styled clearly and responsively.\\n   - Apply padding 'p-4', spacing 'space-y-4', borders 'border', and shadows 'shadow-md' for each section.\\n   - Headings should have bold text 'font-bold' and appropriate sizes (e.g., 'text-lg', 'text-xl').\\n   - For important details (like overspent amounts), use contrasting colors such as red 'text-red-500' to draw attention.\\n   - Ensure the layout is responsive and visually appealing, keeping spacing consistent and details clearly separated.\\n\\nThe final response should be wrapped in a single <div> element containing all the formatted sections with Tailwind CSS classes applied to ensure proper styling and structure. The budget details (including amounts, expenses, and suggestions) are as follows:\\n\\n\" + budgetDetail\n      };\n      try {\n        setAiLoading(true);\n        const token = localStorage.getItem(\"token\");\n        if (!token) {\n          setError(\"Unauthorized! Please log in again.\");\n          navigate(\"/login\");\n          return;\n        }\n        const response = await axios.post(\"http://localhost:4000/api/v1/getairesponse\", promptData,\n        // Correctly pass the promptData here\n        {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log(\"AI response received:\", response.data); // Log the AI response\n        const responseData = response.data.response.replace(/```html|```/g, '');\n\n        // Now set the cleaned response to the state variable\n        setAiResponse(responseData);\n      } catch (error) {\n        console.error(\"Error fetching AI response:\", error);\n        setError(\"Failed to fetch AI response. Please try again later.\");\n      } finally {\n        setAiLoading(false);\n      }\n    };\n    fetchData();\n  }, [budget]);\n\n  // Function to download PDF\n  const downloadPDF = () => {\n    const element = document.getElementById(\"budget-report\");\n    const options = {\n      margin: 1,\n      filename: 'budget-report.pdf',\n      html2canvas: {\n        scale: 2\n      },\n      jsPDF: {\n        unit: 'in',\n        format: 'letter',\n        orientation: 'portrait'\n      }\n    };\n    html2pdf().from(element).set(options).save();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      mode: mode,\n      setMode: setMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen bg-gradient-to-b from-gray-800 to-gray-400 text-white flex flex-col items-center p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-4xl font-bold mb-4\",\n        children: \"Expense Report\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-lg mb-8\",\n        children: \"Generate your financial report for the current month based on your budget.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-6 text-lg\",\n        children: \"Loading your budget data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-6 text-lg text-red-500\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }, this) : budget && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg shadow-lg p-6 mt-8 w-[100vw] max-w-3xl text-gray-800 overflow-auto\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold mb-4\",\n          children: \"Generated Budget Report\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 29\n        }, this), aiLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Generating AI response...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 33\n        }, this) : aiResponse ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(BudgetReport, {\n            aiResponse: aiResponse\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: downloadPDF,\n            className: \"mt-6 py-2 px-4 bg-blue-500 text-white rounded-md\",\n            children: \"Download as PDF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No AI response generated yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      mode: mode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this);\n};\n_s(GenerateReport, \"s76c+thdZ9y3BCheea5C9mXaY8g=\", false, function () {\n  return [useNavigate];\n});\n_c = GenerateReport;\nexport default GenerateReport;\nvar _c;\n$RefreshReg$(_c, \"GenerateReport\");","map":{"version":3,"names":["React","useEffect","useState","axios","useNavigate","Navbar","Footer","BudgetReport","html2pdf","jsxDEV","_jsxDEV","GenerateReport","mode","setMode","_s","budget","setBudgets","loading","setLoading","aiLoading","setAiLoading","error","setError","aiResponse","setAiResponse","navigate","fetchBudgets","token","localStorage","getItem","console","log","response","get","headers","Authorization","data","budgets","err","fetchData","length","Array","isArray","budgetDetail","forEach","b","name","amount","spentAmount","startDate","endDate","expenses","e","date","description","promptData","prompt","post","responseData","replace","downloadPDF","element","document","getElementById","options","margin","filename","html2canvas","scale","jsPDF","unit","format","orientation","from","set","save","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Abhishek Kumar Roy/OneDrive/Desktop/finance_tracker/finance_tracker/src/pages/GenerateReport.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport Footer from \"../components/Footer\";\r\nimport BudgetReport from \"../components/BudgetReport\";\r\nimport html2pdf from \"html2pdf.js\";  // Import the html2pdf library\r\n\r\nconst GenerateReport = ({ mode, setMode }) => {\r\n    const [budget, setBudgets] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [aiLoading, setAiLoading] = useState(false);\r\n    const [error, setError] = useState(\"\");\r\n    const [aiResponse, setAiResponse] = useState(\"\");\r\n    const navigate = useNavigate();\r\n\r\n    // Fetch budget data\r\n    useEffect(() => {\r\n        const fetchBudgets = async () => {\r\n            const token = localStorage.getItem(\"token\");\r\n            if (!token) {\r\n                setError(\"Unauthorized! Please log in again.\");\r\n                navigate(\"/login\");\r\n                return;\r\n            }\r\n\r\n            console.log(\"Fetching budgets...\");\r\n\r\n            try {\r\n                setLoading(true);\r\n                const response = await axios.get(\"http://localhost:4000/api/v1/getBudgetWithExpenses\", {\r\n                    headers: { Authorization: `Bearer ${token}` },\r\n                });\r\n                console.log(\"Budget data received:\", response.data.budgets); // Log the received data\r\n                setBudgets(response.data.budgets || []);\r\n            } catch (err) {\r\n                console.error(\"Error fetching budgets:\", err);\r\n                setError(\"Failed to fetch budget data. Please try again later.\");\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchBudgets();\r\n    }, []);\r\n\r\n    // Fetch AI response based on budget data\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            if (!budget.length || !Array.isArray(budget)) {\r\n                console.log(\"No valid budget data to process for AI response.\");\r\n                return;\r\n            }\r\n\r\n            let budgetDetail = \"\";\r\n            budget.forEach(b => {\r\n                budgetDetail += `Budget Name: ${b.name}\\n`;\r\n                budgetDetail += `Total Amount for Budget: ${b.amount}\\n`;\r\n                budgetDetail += `Spent Amount: ${b.spentAmount}\\n`;\r\n                budgetDetail += `Start Date: ${b.startDate}\\n`;\r\n                budgetDetail += `End Date: ${b.endDate}\\n`;\r\n\r\n                if (b.expenses && b.expenses.length > 0) {\r\n                    budgetDetail += `  Expenses:\\n`;\r\n                    b.expenses.forEach(e => {\r\n                        budgetDetail += `    - Amount: ${e.amount}\\n`;\r\n                        budgetDetail += `      Date: ${e.date}\\n`;\r\n                        budgetDetail += `      Description: ${e.description || \"No description available\"}\\n`;\r\n                    });\r\n                } else {\r\n                    budgetDetail += `  No expenses recorded for this budget.\\n`;\r\n                }\r\n\r\n                budgetDetail += '\\n'; // Separate budgets with a blank line\r\n            });\r\n\r\n            const promptData = {\r\n                prompt: \"Generate a detailed, styled budget report using Tailwind CSS, formatted for web rendering. The report should contain a series of individual sections for each budget, each in its own div with appropriate spacing from other sections. For each budget, include the following details:\\n\\n1. **Budget Overview**:\\n   - Total Amount: Display the total allocated amount for the budget.\\n   - Spent Amount: Show the total amount spent from the budget.\\n   - Remaining: Display the remaining balance. If overspent, display 'Overspent' with the negative amount in red.\\n   - Start Date: Display the starting date of the budget period.\\n   - End Date: Display the end date of the budget period.\\n\\n2. **Expense Details**:\\n   - List each recorded expense in an unordered list.\\n   - Each expense should include:\\n     - Amount: The cost of the expense.\\n     - Date: The date when the expense occurred.\\n     - Description: Provide a brief description if available, or state 'No description available.'\\n\\n3. **Suggestions**:\\n   - Offer 2-3 actionable suggestions for improving budget management based on the observed spending behavior (e.g., ways to reduce overspending, organize spending, etc.).\\n\\n4. **Styling Guidelines**:\\n   - Use Tailwind CSS classes to ensure the report is styled clearly and responsively.\\n   - Apply padding 'p-4', spacing 'space-y-4', borders 'border', and shadows 'shadow-md' for each section.\\n   - Headings should have bold text 'font-bold' and appropriate sizes (e.g., 'text-lg', 'text-xl').\\n   - For important details (like overspent amounts), use contrasting colors such as red 'text-red-500' to draw attention.\\n   - Ensure the layout is responsive and visually appealing, keeping spacing consistent and details clearly separated.\\n\\nThe final response should be wrapped in a single <div> element containing all the formatted sections with Tailwind CSS classes applied to ensure proper styling and structure. The budget details (including amounts, expenses, and suggestions) are as follows:\\n\\n\" + budgetDetail,\r\n            };\r\n\r\n            try {\r\n                setAiLoading(true);\r\n                const token = localStorage.getItem(\"token\");\r\n                if (!token) {\r\n                    setError(\"Unauthorized! Please log in again.\");\r\n                    navigate(\"/login\");\r\n                    return;\r\n                }\r\n\r\n                const response = await axios.post(\r\n                    \"http://localhost:4000/api/v1/getairesponse\",\r\n                    promptData, // Correctly pass the promptData here\r\n                    { headers: { Authorization: `Bearer ${token}` } }\r\n                );\r\n\r\n                console.log(\"AI response received:\", response.data); // Log the AI response\r\n                const responseData = response.data.response.replace(/```html|```/g, '');\r\n\r\n                // Now set the cleaned response to the state variable\r\n                setAiResponse(responseData);\r\n\r\n            } catch (error) {\r\n                console.error(\"Error fetching AI response:\", error);\r\n                setError(\"Failed to fetch AI response. Please try again later.\");\r\n            } finally {\r\n                setAiLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, [budget]);\r\n\r\n    // Function to download PDF\r\n    const downloadPDF = () => {\r\n        const element = document.getElementById(\"budget-report\");\r\n        const options = {\r\n            margin: 1,\r\n            filename: 'budget-report.pdf',\r\n            html2canvas: { scale: 2 },\r\n            jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' },\r\n        };\r\n        html2pdf().from(element).set(options).save();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Navbar mode={mode} setMode={setMode} />\r\n            <div className=\"min-h-screen bg-gradient-to-b from-gray-800 to-gray-400 text-white flex flex-col items-center p-6\">\r\n                <h1 className=\"text-4xl font-bold mb-4\">Expense Report</h1>\r\n                <p className=\"text-lg mb-8\">Generate your financial report for the current month based on your budget.</p>\r\n    \r\n                {loading ? (\r\n                    <p className=\"mt-6 text-lg\">Loading your budget data...</p>\r\n                ) : error ? (\r\n                    <p className=\"mt-6 text-lg text-red-500\">{error}</p>\r\n                ) : (\r\n                    budget && (\r\n                        <div className=\"bg-white rounded-lg shadow-lg p-6 mt-8 w-[100vw] max-w-3xl text-gray-800 overflow-auto\">\r\n                            <h2 className=\"text-xl font-bold mb-4\">Generated Budget Report</h2>\r\n                            {aiLoading ? (\r\n                                <p>Generating AI response...</p>\r\n                            ) : aiResponse ? (\r\n                                <div> \r\n                                    <BudgetReport aiResponse={aiResponse} />\r\n                                    <button\r\n                                        onClick={downloadPDF}\r\n                                        className=\"mt-6 py-2 px-4 bg-blue-500 text-white rounded-md\"\r\n                                    >\r\n                                        Download as PDF\r\n                                    </button>\r\n                                </div>\r\n                            ) : (\r\n                                <p>No AI response generated yet.</p>\r\n                            )}\r\n                        </div>\r\n                    )\r\n                )}\r\n            </div>\r\n            <Footer mode={mode} />\r\n        </div>\r\n    );        \r\n};\r\n\r\nexport default GenerateReport;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}